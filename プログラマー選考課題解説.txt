氏名：　　　　　　　　　　服部 怜央(はっとり れお)
ビルド環境/ビルド方式：　 Visual Studio 2019 / Release,x86
プログラミング言語：　　　C++

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
1.コマンドライン引数を入力する際に

・実行ファイル -i 入力ファイル名 -o 出力ファイル名

と入力をお願い致します。

2.暗号化、復号処理を行うときは、共通鍵の長さを一緒の数値でお願い致します。

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

暗号化の解説：
CBCモードのAES暗号化処理を実装しました。

①コマンドライン引数で入力ファイル名と出力ファイル名を入力します。

②共通鍵の長さを4(128bit)、6(192bit)、8(256bit)のいずれかで指定します。
　　　　　　　　　　　　　　　　　　　
③ラウンド数を共通鍵の長さ+6で決めた後、用意していた共通鍵のデータ配列(mkey)を空の配列(key)に先ほど指定した共通鍵の長さ分(メモリ分)コピーします。

④コピーした共通鍵(key)の情報をvoid型のKeyExpansion関数に渡し、暗号化するためのラウンド鍵(mRoundKey)を準備します。

⑤最初にコマンドライン引数で受け取った入力ファイル名のパスをbool型のOpenInputFile関数に渡し、入力ファイルストリームでバイナリファイルとして開きます。そして、ファイルが開けたら戻り値でtrueを返し、開けなかったらfalseを返します。

⑥最初にコマンドライン引数で受け取った出力ファイル名のパスを利用し、出力ファイルストリームで書き込むための出力ファイルを生成します。

⑦ファイルが開けたらInitWritingEncryptData関数で最初の1ブロック分の暗号化データを書き込みます。

　InitWritingEncryptData関数の処理

　1⃣初期化ベクトル(16Byte)の中身を全て"R" = 0x52にします。

　2⃣入力ファイルストリームで開いたバイナリファイルの最初の1ブロックを空の配列(mData)に読み込みます。

　3⃣読み込んだデータ(mData)を初期化ベクトルとXORして暗号ブロック(mEncryptBlock)に代入します。

　4⃣Cipher関数で最初の暗号ブロックを暗号化します。

　　Cipher関数の処理

　　❶AddRoundKey関数でラウンド鍵(mRoundKey)と暗号ブロックをXORして暗号ブロックに代入します。

　　❷SubBytes関数で各マスに分けられた1byte長のマスの内部で換字表(フォワードSボックス)を用いて暗号ブロックのbit置換を行います。

　　❸ShiftRows関数で4バイト単位の行を一定規則で暗号ブロックを左シフトします(4×4マスの1行目は左シフトせず、2行目は1左シフト、3行目は2左シフト、4行目は3左シフトします)。

　　❹MixColumns関数でビット演算による４バイト単位の行列変換を暗号ブロックで行います。

　　❺❶～❹の処理をラウンド数分繰り返して行います。その後❷、❸、❶の順番で処理を行い暗号化します。

　　Cipher関数の処理終了。

　5⃣暗号化した最初の1ブロックを出力ファイルに書き込みます。

　6⃣暗号化されているブロックを1つ前の暗号ブロック(mEncryptBlockPre)として格納します。

　InitWritingEncryptData関数の処理終了。

⑧WritingEncryptData関数の処理を行うのですが、InitWritingEncryptData関数と同じ処理をEOFまで繰り返し行うので、解説を割愛します。

⑨eof関数でデータがないことを確認したら、CBCモードのAES暗号化処理を終了します。



復号の解説：
復号処理は暗号化処理の逆変換を逆順で行うので、解説を割愛します。



工夫した点：
・暗号化強度を意識したCBCモードのAES暗号化、復号処理
・ファイルチェック、コマンドライン引数のエラーチェック
・他人が自分のコードを見るということを意識したコメント書き
・クラス設計


参考文献：
・NISTが発行しているFIPS 197
・https://web.archive.org/web/20090503235219/http://www-ailab.elcom.nitech.ac.jp/security/aes/overview.html
・https://free.pjc.co.jp/AES/index.html
・https://qiita.com/p1ro3/items/6bb1c78a6c27109f6b93
・https://qiita.com/asksaito/items/1793b8d8b3069b0b8d68